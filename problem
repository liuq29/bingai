List<PendingWithdrawInfo> processedList = pendingWithdrawInfoList.stream()
                .map(pwi -> {
                    Map<String, List<WithdrawInfo>> groupedByType = pwi.getWithdrawInfoList().stream()
                            .collect(Collectors.groupingBy(WithdrawInfo::getPayeeType));

                    List<WithdrawInfo> combinedList = groupedByType.entrySet().stream()
                            .map(entry -> {
                                String payeeType = entry.getKey();
                                double totalAmount = entry.getValue().stream()
                                        .mapToDouble(wi -> Double.parseDouble(wi.getPayeeAmount()))
                                        .sum();
                                String formattedAmount = String.format("%.2f", totalAmount);
                                WithdrawInfo combinedInfo = new WithdrawInfo();
                                combinedInfo.setPayeeType(payeeType);
                                combinedInfo.setPayeeAmount(formattedAmount);
                                combinedInfo.setPayeeId(entry.getValue().get(0).getPayeeId()); // Assuming payeeId is the same for all
                                combinedInfo.setPayeeName(entry.getValue().get(0).getPayeeName()); // Assuming payeeName is the same for all
                                return combinedInfo;
                            })
                            .collect(Collectors.toList());

                    pwi.setWithdrawInfoList(combinedList);
                    return pwi;
                })
                .collect(Collectors.toList());

        String processedJson = mapper.writeValueAsString(processedList);
        System.out.println(processedJson);
