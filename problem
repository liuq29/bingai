import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public class MergeWithdrawInfo {

    public static void main(String[] args) {
        List<PendingWithdrawInfo> pendingWithdrawInfoList = null; // 假设已初始化并填充了测试数据

        List<PendingWithdrawInfo> mergedList = mergeWithdrawInfo(pendingWithdrawInfoList);
        // 输出合并后的结果
        mergedList.forEach(System.out::println);
    }

    public static List<PendingWithdrawInfo> mergeWithdrawInfo(List<PendingWithdrawInfo> pendingWithdrawInfoList) {
        if (pendingWithdrawInfoList == null || pendingWithdrawInfoList.isEmpty()) {
            return List.of();
        }

        return pendingWithdrawInfoList.stream()
                .collect(Collectors.groupingBy(PendingWithdrawInfo::getProductName))
                .values()
                .stream()
                .map(MergeWithdrawInfo::mergePendingWithdrawInfos)
                .collect(Collectors.toList());
    }

    private static PendingWithdrawInfo mergePendingWithdrawInfos(List<PendingWithdrawInfo> list) {
        PendingWithdrawInfo merged = new PendingWithdrawInfo();
        merged.setProductName(list.get(0).getProductName());
        merged.setCo(list.get(0).getCo());
        merged.setPolicyNum(list.get(0).getPolicyNum());

        Map<String, List<WithdrawInfo>> groupedWithdrawInfo = list.stream()
                .flatMap(pwi -> pwi.getWithdrawInfoList().stream())
                .collect(Collectors.groupingBy(WithdrawInfo::getPayeeType));

        List<WithdrawInfo> mergedWithdrawInfo = groupedWithdrawInfo.entrySet().stream()
                .map(e -> {
                    BigDecimal totalAmount = e.getValue().stream()
                            .map(wi -> new BigDecimal(wi.getPayeeAmount()))
                            .reduce(BigDecimal.ZERO, BigDecimal::add);
                    WithdrawInfo mergedWithdrawInfoItem = new WithdrawInfo();
                    mergedWithdrawInfoItem.setPayeeType(e.getKey());
                    mergedWithdrawInfoItem.setPayeeAmount(totalAmount.setScale(2, BigDecimal.ROUND_DOWN).toString());
                    mergedWithdrawInfoItem.setPayeeId(e.getValue().get(0).getPayeeId());
                    mergedWithdrawInfoItem.setPayeeName(e.getValue().get(0).getPayeeName());
                    return mergedWithdrawInfoItem;
                })
                .collect(Collectors.toList());

        merged.setWithdrawInfoList(mergedWithdrawInfo);
        return merged;
    }
}
